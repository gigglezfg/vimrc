" /***************************
"  * Author: Fange Zhang
"  * Last change: 2018 Aug 3
"  **************************/

" To use it, copy it to
"     for Unix and OS/2:  ~/.vimrc
"	      for Amiga:  s:.vimrc
"  for MS-DOS and Win32:  $VIM\_vimrc
"	    for OpenVMS:  sys$login:.vimrc

" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
"是否兼容VI，compatible为兼容，nocompatible为不完全兼容 
"如果设置为compatible，则tab将不会变成空格 
set nocompatible 
"-----------------------
" 1. Base Configure
"-----------------------

"解决consle输出乱码 
language messages zh_CN.utf-8 
 
"自动检测文件类型并加载相应的设置，snipMate插件需要打开这个配置选项 
filetype plugin indent on 
 
"语法高亮 
syntax on 
 
"自动缩进 
set autoindent 
"智能对齐方式 
set smartindent 
"一个tab是4个字符 
set tabstop=4 
"按一次tab前进4个字符 
set softtabstop=4 
"用空格代替tab 
set expandtab 
"设置自动缩进 
set ai! 
"缩进的字符个数 
set cindent shiftwidth=4 
"set autoindent shiftwidth=2 

"显示行号 
set number 
 
"打开光标的行列位置显示功能 
set ruler 
 
"显示中文引号 
set ambiwidth=double

"设置命令行的高度 
set cmdheight=2 
 
"高亮搜索的关键字 
set hlsearch 
 
"搜索忽略大小写 
set ignorecase 
 
"设置命令历史行数 
set history=100 

" 映射全选+复制 ctrl+a
map <C-A> ggVGY
map! <C-A> <Esc>ggVGY
map <F12> gg=G
" 选中状态下 Ctrl+c 复制
vmap <C-c> "+y
"比较文件  
nnoremap <C-F2> :vert diffsplit 
"新建标签  
map <M-F2> :tabnew<CR>  
"列出当前目录文件  
map <F3> :tabnew .<CR>  
"打开树状文件目录  
map <C-F3> \be  

"设置VIM状态栏 
set laststatus=2 "显示状态栏(默认值为1, 无法显示状态栏) 
set statusline= 
set statusline+=%2*%-3.3n%0*\ " buffer number 
set statusline+=%f\ " file name 
set statusline+=%h%1*%m%r%w%0* " flag 
set statusline+=[ 
if v:version >= 600 
    set statusline+=%{strlen(&ft)?&ft:'none'}, " filetype 
    set statusline+=%{&fileencoding}, " encoding 
endif 
set statusline+=%{&fileformat}] " file format 
set statusline+=%= " right align 
"set statusline+=%2*0x%-8B\ " current char 
set statusline+=0x%-8B\ " current char 
set statusline+=%-14.(%l,%c%V%)\ %<%P " offset 
if filereadable(expand("$VIM/vimfiles/plugin/vimbuddy.vim")) 
    set statusline+=\ %{VimBuddy()} " vim buddy 
endif 
"状态行颜色 
"highlight StatusLine guifg=SlateBlue guibg=Yellow 
"highlight StatusLineNC guifg=Gray guibg=White 

"配色（更多的配色见colors目录和http://www.cs.cmu.edu/~maverick/VimColorSchemeTest/index-c.html） 
"colorscheme peacock_light 
colorscheme peacock_desert 

" 用空格键来开关折叠 
set foldenable 
set foldmethod=manual 
nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc':'zo')<CR> 

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" 
" CTags的设定 
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" 
" 按照名称排序 
let Tlist_Sort_Type = "name" 

" 在右侧显示窗口 
let Tlist_Use_Right_Window = 1 

" 压缩方式 
let Tlist_Compart_Format = 1 

" 如果只有一个buffer，kill窗口也kill掉buffer 
let Tlist_Exist_OnlyWindow = 1 

" 不要关闭其他文件的tags 
let Tlist_File_Fold_Auto_Close = 0 

" 不要显示折叠树 
let Tlist_Enable_Fold_Column = 0 

"-----------------------
" 2. Advanced Configure
"-----------------------

"Alt + -> 打开下一个文件 
map <M-right> <ESC>:bn<RETURN> 
"Alt + <- 打开上一个文件 
map <M-left> <ESC>:bp<RETURN> 

"设置插件SuperTab 
"设置按下<Tab>后默认的补全方式, 默认是<C-P>, 
"现在改为<C-X><C-O>. 关于<C-P>的补全方式, 
"还有其他的补全方式, 可以看看下面的一些帮助: 
":help ins-completion 
":help compl-omni 
let g:SuperTabRetainCompletionType=2 
"0 - 不记录上次的补全方式 
"1 - 记住上次的补全方式,直到用其他的补全命令改变它 
"2 - 记住上次的补全方式,直到按ESC退出插入模式为止 
let g:SuperTabDefaultCompletionType="<C-X><C-O>" 

"放大字体 
function <SID>FontSize_Enlarge() 
    if GetSystem() == "linux" 
        let pattern = '\<\d\+$' 
    elseif GetSystem() == "windows" 
        let pattern = ':h\zs\d\+\ze:' 
    endif 
    let fontsize = matchstr(&gfn, pattern) 
    let cmd = substitute(&gfn, pattern, string(fontsize + 1), 'g') 
    let &gfn=cmd 
    let fontsize = matchstr(&gfw, pattern) 
    let cmd = substitute(&gfw, pattern, string(fontsize + 1), 'g') 
    let &gfw=cmd 
endfunction 
nnoremap <A-+> :call <SID>FontSize_Enlarge()<CR> 
 
"缩小字体 
function <SID>FontSize_Reduce() 
    if GetSystem() == "linux" 
        let pattern = '\<\d\+$' 
    elseif GetSystem() == "windows" 
        let pattern = ':h\zs\d\+\ze:' 
    endif 
    let fontsize = matchstr(&gfn, pattern) 
    let cmd = substitute(&gfn, pattern, string(fontsize - 1), 'g') 
    let &gfn=cmd 
    let fontsize = matchstr(&gfw, pattern) 
    let cmd = substitute(&gfw, pattern, string(fontsize - 1), 'g') 
    let &gfw=cmd 
endfunction 
nnoremap <A--> :call <SID>FontSize_Reduce()<CR> 

"F2处理行尾的空格以及文件尾部的多余空行 
"Automatically remove trailing spaces when saving a file. 
autocmd BufRead,BufWrite * if ! &bin | silent! %s/\s\+$//ge | endif 
"Remove indenting on empty line 
map <F2> :w<CR>:call CleanupBuffer(1)<CR>:noh<CR> 
function! CleanupBuffer(keep) 
    " Skip binary files 
    if (&bin > 0) 
        return 
    endif 
    " Remove spaces and tabs from end of every line, if possible 
    silent! %s/\s\+$//ge 
    " Save current line number 
    let lnum = line(".") 
    " number of last line 
    let lastline = line("$") 
    let n        = lastline 
    " while loop 
    while (1) 
        " content of last line 
        let line = getline(n) 
        " remove spaces and tab 
        if (!empty(line)) 
            break 
        endif 
        let n = n - 1 
    endwhile 
    " Delete all empty lines at the end of file 
    let start = n+1+a:keep 
    if (start < lastline) 
        execute n+1+a:keep . "," . lastline . "d" 
    endif 
    " after clean spaces and tabs, jump back 
    exec "normal " . lnum . "G" 
endfunction 

"F6打开或关闭nerd_tree和taglist（nerd_tree插件） 
"由于nerd_tree和taglist采用了trinity插件打开 
"所以具体的设置以trinity.vim为准 
nmap <F6>  :TrinityToggleTagListAndNERDTree<CR> 

"F7单独切换打开nerd_tree（nerd_tree插件） 
let g:NERDChristmasTree = 1              "色彩显示 
let g:NERDTreeShowHidden = 1             "显示隐藏文件 
let g:NERDTreeWinPos = 'left'            "窗口显示位置 
let g:NERDTreeHighlightCursorline = 0    "高亮当前行 
nmap <F7>  :TrinityToggleNERDTree<CR> 

