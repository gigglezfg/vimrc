"" Giggle Z 's VIM configuration
"" Last Change: 2018/8/5 Sun
"" Refer to Junbo 's VIM configuration

" Basic Setting {{{1
filetype plugin on
filetype indent on
syntax enable
syntax on
silent! colorscheme space-vim-dark
if 1 "isdirectory(g:dir_plugin.'/space-vim-dark/')
    let    g:space_vim_dark_background = 234
endif

"解决consle输出乱码
language messages zh_CN.utf-8

" Basic setting {{{2
"" refer to junbo's setting
"" TO DO #need to change according to self
set  nocompatible
set    expandtab
set    shiftwidth=4
set    tabstop=4
set    softtabstop=4
set    smarttab
set    number
set    rnu
set    numberwidth=5
set  nowrap
set    autoindent
set    autoread
set    autowrite
set    background=dark
set  nobackup
set    backspace=indent,eol,start
set    cindent
set    cinoptions=:0
set    cinoptions+=g0
set    clipboard+=unnamed
set    cursorline
set    cursorcolumn
set    complete+=k
set    completeopt=menuone,longest,preview
set    encoding=utf-8
set    foldenable
set    foldmethod=marker
set    helplang=en
set    hidden
set    history=100
set    hlsearch
set    ruler
set    showcmd
set    incsearch
set    wildmenu
set    wildmode=list:longest,full
set    shortmess+=mrwx
set    smartcase
set    ignorecase
set    magic
set    mouse=a
set    mousehide
set    laststatus=2
set    lazyredraw
set  noshowmatch
set    matchtime=0
set    pumheight=15
set    scrolloff=5
set    smartindent
set    cmdheight=1
set    textwidth=120
set    timeoutlen=250
set    updatetime=1000
set    whichwrap=h,l
set    wildignore=*.bak,*.o,*.e,*~
set    wildignore+=*/tmp/*,*.so,*.bin,*.swp,*.ctag
set  nowritebackup
set    sessionoptions=buffers,globals,localoptions,curdir,tabpages,winsize,winpos,resize
set  noswapfile
set    ignorecase
" Customized with different platforms
if 1 "(g:os_is_unix == 1)
    set    termencoding=utf-8
    set    langmenu=none
    set    fileencoding=utf-8
    set    fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1,default
    set    fileformats=unix
    set    termencoding=utf-8
    let    &t_SI.="\e[5 q"
    let    &t_SR.="\e[4 q"
    let    &t_EI.="\e[1 q"
else
    set    langmenu=zh_cm.utf-8
    set    fileencoding=chinese
    set    fileencodings=utf-8,chinese,latin-1
    set    fileformats=dos
    let    $LANG="zh_CN.UTF-8"
    set    termencoding=chinese
endif
" }}}

" }}}

" Shortcut key -Mapping {{{1

" Map basic introduce {{{2
" 键表 |key-notation| 
" <k0> - <k9> 小键盘 0 到 9 *keypad-0* *keypad-9* 
" <S-...> Shift＋键 *shift* *<S-* 
" <C-...> Control＋键 *control* *ctrl* *<C-* 
" <M-...> Alt＋键 或 meta＋键 *meta* *alt* *<M-* 
" <A-...> 同 <m-...> *<A-* 
" <t_xx> termcap 里的 "xx" 入口键 
" }}}

" Useful mapping {{{2
" 映射全选+复制 ctrl+a
map <C-A> ggVGY
map! <C-A> <Esc>ggVGY
map <F12> gg=G
" 选中状态下 Ctrl+c 复制
vmap <C-c> "+y
"比较文件
nnoremap cmp :vert diffsplit
"新建标签
map <C-F2> :tabnew<CR>
"列出当前目录文件
map <F3> :tabnew .<CR>
"打开树状文件目录
map <C-F3> \be
" 用空格键来开关折叠
nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc':'zo')<CR>
"Alt + -> 打开下一个文件
map <M-right> <ESC>:bn<RETURN>
"Alt + <- 打开上一个文件
map <M-left> <ESC>:bp<RETURN>

" }}}

"设置插件SuperTab {{{2
"设置按下<Tab>后默认的补全方式, 默认是<C-P>,
"现在改为<C-X><C-O>. 关于<C-P>的补全方式,
"还有其他的补全方式, 可以看看下面的一些帮助:
":help ins-completion
":help compl-omni
let g:SuperTabRetainCompletionType=2
"0 - 不记录上次的补全方式
"1 - 记住上次的补全方式,直到用其他的补全命令改变它
"2 - 记住上次的补全方式,直到按ESC退出插入模式为止
let g:SuperTabDefaultCompletionType="<C-X><C-O>"
" }}}

" }}}

" Basic Function {{{1

" 放大字体 A++ {{{2
function <SID>FontSize_Enlarge()
    if GetSystem() == "linux"
        let pattern = '\<\d\+$'
    elseif GetSystem() == "windows"
        let pattern = ':h\zs\d\+\ze:'
    endif
    let fontsize = matchstr(&gfn, pattern)
    let cmd = substitute(&gfn, pattern, string(fontsize + 1), 'g')
    let &gfn=cmd
    let fontsize = matchstr(&gfw, pattern)
    let cmd = substitute(&gfw, pattern, string(fontsize + 1), 'g')
    let &gfw=cmd
endfunction
nnoremap <A-+> :call <SID>FontSize_Enlarge()<CR>
" }}}


" 缩小字体 A-- {{{2
function <SID>FontSize_Reduce()
    if GetSystem() == "linux"
        let pattern = '\<\d\+$'
    elseif GetSystem() == "windows"
        let pattern = ':h\zs\d\+\ze:'
    endif
    let fontsize = matchstr(&gfn, pattern)
    let cmd = substitute(&gfn, pattern, string(fontsize - 1), 'g')
    let &gfn=cmd
    let fontsize = matchstr(&gfw, pattern)
    let cmd = substitute(&gfw, pattern, string(fontsize - 1), 'g')
    let &gfw=cmd
endfunction
nnoremap <A--> :call <SID>FontSize_Reduce()<CR>
" }}}

" F2处理行尾的空格以及文件尾部的多余空行 {{{2
"Automatically remove trailing spaces when saving a file.
autocmd BufRead,BufWrite * if ! &bin | silent! %s/\s\+$//ge | endif
"Remove indenting on empty line
map <F2> :w<CR>:call CleanupBuffer(1)<CR>:noh<CR>
function! CleanupBuffer(keep)
    " Skip binary files
    if (&bin > 0)
        return
    endif
    " Remove spaces and tabs from end of every line, if possible
    silent! %s/\s\+$//ge
    " Save current line number
    let lnum = line(".")
    " number of last line
    let lastline = line("$")
    let n        = lastline
    " while loop
    while (1)
        " content of last line
        let line = getline(n)
        " remove spaces and tab
        if (!empty(line))
            break
        endif
        let n = n - 1
    endwhile
    " Delete all empty lines at the end of file
    let start = n+1+a:keep
    if (start < lastline)
        execute n+1+a:keep . "," . lastline . "d"
    endif
    " after clean spaces and tabs, jump back
    exec "normal " . lnum . "G"
endfunction
" }}}

" }}}